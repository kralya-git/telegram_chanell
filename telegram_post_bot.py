import os
import logging
import asyncio
import nest_asyncio
import time
import threading
import signal
import sys
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.error import Conflict, RetryAfter, TimedOut, BadRequest
from dotenv import load_dotenv
from flask import Flask, render_template_string, jsonify

# Apply nest_asyncio to handle event loop issues
nest_asyncio.apply()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log', encoding='utf-8')  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
    ]
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π logger –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
bot_instance = None
shutdown_event = threading.Event()


class PostBot:
    def __init__(self, token: str):
        self.token = token
        self.posts_dir = "posts"
        self._ensure_posts_directory()

    def _ensure_posts_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.posts_dir):
            os.makedirs(self.posts_dir)
            logger.info(f"Created posts directory: {self.posts_dir}")

    def _create_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'"""
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data='create_post')],
        ]
        return InlineKeyboardMarkup(keyboard)

    def _get_next_post_number(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞"""
        existing_posts = [d for d in os.listdir(self.posts_dir)
                         if os.path.isdir(os.path.join(self.posts_dir, d)) and d.startswith("–ü–æ—Å—Ç_")]
        if not existing_posts:
            return 1

        numbers = []
        for post_dir in existing_posts:
            try:
                num = int(post_dir.split("_")[1])
                numbers.append(num)
            except (IndexError, ValueError):
                continue

        return max(numbers) + 1 if numbers else 1

    def _create_post_directory(self, post_number: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç–∞"""
        post_dir = os.path.join(self.posts_dir, f"–ü–æ—Å—Ç_{post_number}")
        os.makedirs(post_dir, exist_ok=True)
        return post_dir

    def _save_text_content(self, post_dir: str, text: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞"""
        text_file = os.path.join(post_dir, "content.txt")
        with open(text_file, 'w', encoding='utf-8') as f:
            f.write(text)
        logger.info(f"Saved text content to: {text_file}")

    def _save_media_file(self, post_dir: str, file_path: str, file_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –ø–æ—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        base_name, ext = os.path.splitext(file_name)
        counter = 1
        final_file_name = file_name
        final_file_path = os.path.join(post_dir, final_file_name)

        while os.path.exists(final_file_path):
            final_file_name = f"{base_name}_{counter}{ext}"
            final_file_path = os.path.join(post_dir, final_file_name)
            counter += 1

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        import shutil
        shutil.copy2(file_path, final_file_path)
        logger.info(f"Saved media file to: {final_file_path}")
        return final_file_name

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∏–¥–µ–π –ø–æ—Å—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /post –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–∏.\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –§–∞–π–ª—ã\n"
            "‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
        )
        keyboard = self._create_main_keyboard()
        await update.message.reply_text(welcome_text, reply_markup=keyboard)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

        if query.data == 'create_post':
            # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /post - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ callback query
            await query.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞:\n\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
                "‚Ä¢ –§–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª—ã\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n\n",
                reply_markup=self._create_main_keyboard()
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            context.user_data['waiting_for_post'] = True

    async def post_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /post"""
        keyboard = self._create_main_keyboard()
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞:\n\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏\n"
            "‚Ä¢ –§–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n\n",
            reply_markup=keyboard
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        context.user_data['waiting_for_post'] = True

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not context.user_data.get('waiting_for_post'):
            return

        user = update.effective_user
        message = update.message

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞
        post_number = self._get_next_post_number()
        post_dir = self._create_post_directory(post_number)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        text_content = []
        if message.text:
            text_content.append(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
        if message.caption:
            text_content.append(f"–ü–æ–¥–ø–∏—Å—å: {message.caption}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.forward_origin:
            if message.forward_origin.type == 'channel':
                text_content.append(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞: {message.forward_origin.chat.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'}")
            elif message.forward_origin.type == 'user':
                text_content.append(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.forward_origin.sender_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        text_content.append(f"–ê–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞: {user.first_name} {user.last_name or ''}")
        text_content.append(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
        text_content.append(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {message.date}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        if text_content:
            full_text = "\n".join(text_content)
            self._save_text_content(post_dir, full_text)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        saved_files = []
        response_text = f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\nüìÅ –ü–∞–ø–∫–∞: –ü–æ—Å—Ç_{post_number}\nüìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {post_dir}\n"

        # –§–æ—Ç–æ
        if message.photo:
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            file_size_mb = photo.file_size / (1024 * 1024)

            if file_size_mb > 50:
                logger.warning(f"–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size_mb:.1f}MB. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                response_text += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–æ—Ç–æ ({file_size_mb:.1f}MB)"
            else:
                try:
                    file_path = await photo.get_file()
                    await file_path.download_to_drive(f"temp_photo_{user.id}.jpg")
                    saved_name = self._save_media_file(post_dir, f"temp_photo_{user.id}.jpg", "photo.jpg")
                    saved_files.append(saved_name)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ ({file_size_mb:.1f}MB)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    response_text += "\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"
                finally:
                    if os.path.exists(f"temp_photo_{user.id}.jpg"):
                        os.remove(f"temp_photo_{user.id}.jpg")

        # –í–∏–¥–µ–æ
        if message.video:
            video = message.video
            file_size_mb = video.file_size / (1024 * 1024)

            if file_size_mb > 50:
                logger.warning(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size_mb:.1f}MB. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                response_text += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∏–¥–µ–æ ({file_size_mb:.1f}MB)"
            else:
                try:
                    file_path = await video.get_file()
                    await file_path.download_to_drive(f"temp_video_{user.id}.mp4")
                    saved_name = self._save_media_file(post_dir, f"temp_video_{user.id}.mp4", "video.mp4")
                    saved_files.append(saved_name)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ ({file_size_mb:.1f}MB)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
                    response_text += "\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"
                finally:
                    if os.path.exists(f"temp_video_{user.id}.mp4"):
                        os.remove(f"temp_video_{user.id}.mp4")

        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        if message.document:
            document = message.document
            file_size_mb = document.file_size / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
            temp_filename = None

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram Bot API –ª–∏–º–∏—Ç ~50MB –¥–ª—è getFile)
                if file_size_mb > 50:
                    logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f}MB. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    response_text += f"\n‚ö†Ô∏è –§–∞–π–ª '{document.file_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
                else:
                    file_path = await document.get_file()
                    file_extension = os.path.splitext(document.file_name)[1] or ".bin"
                    temp_filename = f"temp_doc_{user.id}{file_extension}"

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    await file_path.download_to_drive(temp_filename)
                    saved_name = self._save_media_file(post_dir, temp_filename, document.file_name)
                    saved_files.append(saved_name)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {document.file_name} ({file_size_mb:.1f}MB)")

            except BadRequest as e:
                if "too big" in str(e).lower():
                    logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {document.file_name}")
                    response_text += f"\n‚ö†Ô∏è –§–∞–π–ª '{document.file_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {document.file_name}: {e}")
                    response_text += f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ '{document.file_name}'"
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {document.file_name}: {e}")
                response_text += f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ '{document.file_name}'"
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if temp_filename and os.path.exists(temp_filename):
                    os.remove(temp_filename)

        # –ê–Ω–∏–º–∞—Ü–∏–∏ (GIF)
        if message.animation:
            animation = message.animation
            file_size_mb = animation.file_size / (1024 * 1024)

            if file_size_mb > 50:
                logger.warning(f"GIF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f}MB. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                response_text += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ GIF ({file_size_mb:.1f}MB)"
            else:
                try:
                    file_path = await animation.get_file()
                    await file_path.download_to_drive(f"temp_animation_{user.id}.gif")
                    saved_name = self._save_media_file(post_dir, f"temp_animation_{user.id}.gif", "animation.gif")
                    saved_files.append(saved_name)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ GIF ({file_size_mb:.1f}MB)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GIF: {e}")
                    response_text += "\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GIF"
                finally:
                    if os.path.exists(f"temp_animation_{user.id}.gif"):
                        os.remove(f"temp_animation_{user.id}.gif")

        # –ê—É–¥–∏–æ
        if message.audio:
            audio = message.audio
            file_size_mb = audio.file_size / (1024 * 1024)

            if file_size_mb > 50:
                logger.warning(f"–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size_mb:.1f}MB. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                response_text += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∞—É–¥–∏–æ ({file_size_mb:.1f}MB)"
            else:
                try:
                    file_path = await audio.get_file()
                    file_extension = os.path.splitext(audio.file_name)[1] if hasattr(audio, 'file_name') else ".mp3"
                    temp_filename = f"temp_audio_{user.id}{file_extension}"
                    await file_path.download_to_drive(temp_filename)
                    saved_name = self._save_media_file(post_dir, temp_filename, audio.file_name or "audio.mp3")
                    saved_files.append(saved_name)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞—É–¥–∏–æ ({file_size_mb:.1f}MB)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
                    response_text += "\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ"
                finally:
                    if os.path.exists(temp_filename):
                        os.remove(temp_filename)

        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.voice:
            voice = message.voice
            file_size_mb = voice.file_size / (1024 * 1024)

            if file_size_mb > 50:
                logger.warning(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size_mb:.1f}MB. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                response_text += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ ({file_size_mb:.1f}MB)"
            else:
                try:
                    file_path = await voice.get_file()
                    await file_path.download_to_drive(f"temp_voice_{user.id}.ogg")
                    saved_name = self._save_media_file(post_dir, f"temp_voice_{user.id}.ogg", "voice.ogg")
                    saved_files.append(saved_name)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ ({file_size_mb:.1f}MB)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
                    response_text += "\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ"
                finally:
                    if os.path.exists(f"temp_voice_{user.id}.ogg"):
                        os.remove(f"temp_voice_{user.id}.ogg")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_for_post'] = False

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –≤ –æ—Ç–≤–µ—Ç
        if text_content:
            response_text += "\nüìù –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        if saved_files:
            response_text += f"\nüìé –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(saved_files)}"

        await update.message.reply_text(response_text)

    def create_application(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        application = (Application.builder()
                      .token(self.token)
                      .get_updates_read_timeout(30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                      .get_updates_write_timeout(30)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                      .build())

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("post", self.post_command))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(MessageHandler(
            filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.ALL |
            filters.ANIMATION | filters.AUDIO | filters.VOICE,
            self.handle_message
        ))

        return application

    async def run_with_retry(self, max_retries=5):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö"""
        application = self.create_application()

        for attempt in range(max_retries):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ‚Ññ{attempt + 1}/{max_retries}")
                logger.info("Bot started successfully!")
                await application.run_polling()
                break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

            except Conflict as e:
                if attempt < max_retries - 1:
                    wait_time = 30 * (attempt + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}). –û–∂–∏–¥–∞–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(wait_time)
                else:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                    raise e

            except (RetryAfter, TimedOut) as e:
                wait_time = getattr(e, 'retry_after', 60)
                logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)

            except BadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
                break

            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                if attempt < max_retries - 1:
                    logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(30)
                else:
                    raise e


# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤
class WebInterface:
    def __init__(self, post_bot):
        self.post_bot = post_bot
        self.app = Flask(__name__)
        self._setup_routes()

    def _setup_routes(self):
        @self.app.route('/')
        def index():
            html_template = """
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Telegram Post Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</title>
                <script src="https://cdn.tailwindcss.com"></script>
            </head>
            <body class="bg-gray-100 min-h-screen">
                <div class="container mx-auto px-4 py-8">
                    <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">
                        üì± Telegram Post Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    </h1>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- –õ–æ–≥–∏ -->
                        <div class="bg-white rounded-lg shadow-md p-6">
                            <h2 class="text-xl font-semibold mb-4 text-gray-700">üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</h2>
                            <div class="space-y-2 mb-4" id="logsContainer" style="max-height: 400px; overflow-y: auto;">
                                <div class="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
                            </div>
                            <button onclick="refreshLogs()"
                                class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded text-sm">
                                üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏
                            </button>
                        </div>

                        <!-- –ü–æ—Å—Ç—ã -->
                        <div class="bg-white rounded-lg shadow-md p-6">
                            <h2 class="text-xl font-semibold mb-4 text-gray-700">üìÅ –ü–æ—Å—Ç—ã</h2>
                            <div class="space-y-2 mb-4" id="postsContainer" style="max-height: 400px; overflow-y: auto;">
                                <div class="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤...</div>
                            </div>
                            <button onclick="refreshPosts()"
                                class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded text-sm">
                                üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç—ã
                            </button>
                        </div>
                    </div>

                    <!-- –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ -->
                    <div class="mt-6 bg-white rounded-lg shadow-md p-6 hidden" id="postDetail">
                        <h2 class="text-xl font-semibold mb-4 text-gray-700">üìÑ –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞</h2>
                        <div id="postContent" class="text-sm text-gray-600">
                            –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                        </div>
                    </div>
                </div>

                <script>
                    function refreshLogs() {
                        fetch('/api/logs')
                            .then(response => response.json())
                            .then(data => {
                                const container = document.getElementById('logsContainer');
                                container.innerHTML = '';
                                data.logs.forEach(log => {
                                    const div = document.createElement('div');
                                    div.className = 'text-xs p-2 bg-gray-50 rounded border-l-4 ' +
                                        (log.level === 'ERROR' ? 'border-red-500' :
                                         log.level === 'WARNING' ? 'border-yellow-500' : 'border-blue-500');
                                    div.innerHTML = `
                                        <div class="font-mono text-gray-500">${log.time}</div>
                                        <div class="font-semibold text-gray-700">${log.level}</div>
                                        <div class="text-gray-600">${log.message}</div>
                                    `;
                                    container.appendChild(div);
                                });
                            })
                            .catch(error => {
                                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
                                document.getElementById('logsContainer').innerHTML =
                                    '<div class="text-red-500 text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤</div>';
                            });
                    }

                    function refreshPosts() {
                        fetch('/api/posts')
                            .then(response => response.json())
                            .then(data => {
                                const container = document.getElementById('postsContainer');
                                container.innerHTML = '';
                                data.posts.forEach(post => {
                                    const div = document.createElement('div');
                                    div.className = 'text-sm p-3 bg-gray-50 rounded cursor-pointer hover:bg-gray-100';
                                    div.onclick = () => showPostDetail(post.name);
                                    div.innerHTML = `
                                        <div class="font-semibold text-gray-700">${post.name}</div>
                                        <div class="text-gray-500">${post.created}</div>
                                        <div class="text-gray-600">${post.files_count} —Ñ–∞–π–ª–æ–≤</div>
                                    `;
                                    container.appendChild(div);
                                });
                            })
                            .catch(error => {
                                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', error);
                                document.getElementById('postsContainer').innerHTML =
                                    '<div class="text-red-500 text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤</div>';
                            });
                    }

                    function showPostDetail(postName) {
                        fetch(`/api/posts/${postName}`)
                            .then(response => response.json())
                            .then(data => {
                                const detailDiv = document.getElementById('postDetail');
                                const contentDiv = document.getElementById('postContent');

                                detailDiv.classList.remove('hidden');
                                contentDiv.innerHTML = `
                                    <div class="mb-4">
                                        <h3 class="font-semibold text-lg">${data.name}</h3>
                                        <p class="text-gray-500">–°–æ–∑–¥–∞–Ω–æ: ${data.created}</p>
                                    </div>
                                    <div class="mb-4">
                                        <h4 class="font-semibold">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</h4>
                                        <pre class="bg-gray-50 p-3 rounded text-xs overflow-x-auto">${data.content}</pre>
                                    </div>
                                    ${data.files.length > 0 ? `
                                    <div>
                                        <h4 class="font-semibold">–§–∞–π–ª—ã:</h4>
                                        <ul class="list-disc list-inside">
                                            ${data.files.map(file => `<li>${file}</li>`).join('')}
                                        </ul>
                                    </div>
                                    ` : ''}
                                `;
                            })
                            .catch(error => {
                                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞:', error);
                                document.getElementById('postContent').innerHTML =
                                    '<div class="text-red-500 text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞</div>';
                            });
                    }

                    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    setInterval(() => {
                        refreshLogs();
                        refreshPosts();
                    }, 30000);

                    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                    refreshLogs();
                    refreshPosts();
                </script>
            </body>
            </html>
            """
            return render_template_string(html_template)

        @self.app.route('/api/logs')
        def get_logs():
            try:
                logs = []
                if os.path.exists('bot.log'):
                    with open('bot.log', 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                        for line in lines[-50:]:
                            parts = line.strip().split(' - ')
                            if len(parts) >= 4:
                                time_part = parts[0] + ' ' + parts[1]
                                level = parts[2]
                                message = ' - '.join(parts[3:])
                                logs.append({
                                    'time': time_part,
                                    'level': level,
                                    'message': message
                                })
                return jsonify({'logs': logs})
            except Exception as e:
                return jsonify({'error': str(e)}), 500

        @self.app.route('/api/posts')
        def get_posts():
            try:
                posts = []
                if os.path.exists(self.post_bot.posts_dir):
                    for item in os.listdir(self.post_bot.posts_dir):
                        post_path = os.path.join(self.post_bot.posts_dir, item)
                        if os.path.isdir(post_path) and item.startswith('–ü–æ—Å—Ç_'):
                            created_time = datetime.fromtimestamp(os.path.getctime(post_path))
                            files = [f for f in os.listdir(post_path) if os.path.isfile(os.path.join(post_path, f))]
                            posts.append({
                                'name': item,
                                'created': created_time.strftime('%Y-%m-%d %H:%M:%S'),
                                'files_count': len(files)
                            })
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
                posts.sort(key=lambda x: x['created'], reverse=True)
                return jsonify({'posts': posts})
            except Exception as e:
                return jsonify({'error': str(e)}), 500

        @self.app.route('/api/posts/<post_name>')
        def get_post_detail(post_name):
            try:
                post_path = os.path.join(self.post_bot.posts_dir, post_name)
                if not os.path.exists(post_path):
                    return jsonify({'error': '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

                content = ''
                content_file = os.path.join(post_path, 'content.txt')
                if os.path.exists(content_file):
                    with open(content_file, 'r', encoding='utf-8') as f:
                        content = f.read()

                files = [f for f in os.listdir(post_path) if os.path.isfile(os.path.join(post_path, f))]
                created_time = datetime.fromtimestamp(os.path.getctime(post_path))

                return jsonify({
                    'name': post_name,
                    'created': created_time.strftime('%Y-%m-%d %H:%M:%S'),
                    'content': content,
                    'files': files
                })
            except Exception as e:
                return jsonify({'error': str(e)}), 500

    def run_web_server(self, host='0.0.0.0', port=None):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if port is None:
            port = int(os.environ.get('PORT', 8080))
        self.app.run(host=host, port=port, debug=False)


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    shutdown_event.set()
    if bot_instance:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot_instance
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN not found in environment variables!")
        logger.info("Please create a .env file with your bot token:")
        logger.info("TELEGRAM_BOT_TOKEN=your_bot_token_here")
        return

    bot = PostBot(token)
    bot_instance = bot

    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    web_interface = WebInterface(bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(
        target=web_interface.run_web_server,
        daemon=True
    )
    web_thread.start()

    port = int(os.environ.get('PORT', 8080))
    logger.info(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
    logger.info("üì± Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    while not shutdown_event.is_set():
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            await bot.run_with_retry(max_retries=10)
            break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏ —Ä–∞–±–æ—Ç–∞–ª, –≤—ã—Ö–æ–¥–∏–º

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            if shutdown_event.is_set():
                break
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)
    
    logger.info("üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")

if __name__ == '__main__':
    # With nest_asyncio applied, we can use asyncio.run() normally
    asyncio.run(main())